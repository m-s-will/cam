module se_catalyst_adapter
  use shr_kind_mod,    only: r8 => SHR_KIND_R8
  use physics_types,    only: physics_state
  use ppgrid,       only: pcols

  !
  ! !PUBLIC TYPES:
  implicit none
  save
  private ! except

  !--------------------------------------------------------------------------
  ! Public interfaces
  !--------------------------------------------------------------------------

  public :: catalyst_init, se_catalyst_coprocess, se_catalyst_create_grid,&
       se_catalyst_add_chunk, catalyst_finalize
  interface
     logical function  se_requestdatadescription(timeStep, time)
       integer, intent(in) :: timeStep
       real(8), intent(in)    :: time
     end function  se_requestdatadescription
     logical function  se_needtocreategrid()
     end function  se_needtocreategrid
  end interface

  !
  !==========================================================================
CONTAINS
  !==========================================================================
  ! initializes Catalyst
  subroutine catalyst_init()

    !-----------------------------------------------------------------------
    !
    ! Arguments
    !

    !
    ! Locals
    !
    write(*,'(a)') "catalyst_init - once for each processor"
    call se_coprocessorinitializewithpython(&
         "@CMAKE_BINARY_DIR@/se_coprocess.py"//CHAR(0))
  end subroutine catalyst_init

  !===========================================================================  
  ! Creates two unstructured grids for storing data: a sphere and a ball
  function se_catalyst_create_grid(nstep, time, ne, np, &
       nlon, lonRad, nlat, latRad, nlev, levCoord, nPoints2D, myRank) result(continueProcessing)
    use ppgrid,       only: pver
    !-----------------------------------------------------------------------
    !
    ! Arguments
    !
    integer, intent(in)                :: nstep ! current timestep number
    real(kind=8),intent(in)            :: time  ! current time
    integer, intent(in)                :: ne    ! number of cells along each edge of each cube face
    integer, intent(in)                :: np    ! each cell is subdivided by np x np quadrature points
    integer, intent(in)                :: nlon  ! number of longitude values
    real(r8), allocatable,intent(in)   :: lonRad(:) ! longitude values in radians
    integer, intent(in)                :: nlat  ! number of latitude values
    real(r8), pointer, intent(in)      :: latRad(:) ! latitude values in radians
    integer, intent(in)                :: nlev  ! number of level values
    real(r8),intent(in)                :: levCoord(pver)
    integer, intent(in)                :: nPoints2D
    integer, intent(in)                :: myRank
    logical                            :: continueProcessing
    !
    ! Locals
    !

    write(*,'(a, i5.2, f5.2, i5.2)') "se_catalyst_create_grid: ", nstep, time, &
         myRank
    continueProcessing = .false.;
    if (se_requestdatadescription(nstep, time)) then
       continueProcessing = .true.
       if (se_needtocreategrid()) then
          call se_create_grid(ne, np, nlon, lonRad, nlat, latRad, &
               nlev, levCoord, nPoints2D, pcols, myRank)
       end if
    end if
  end function se_catalyst_create_grid

  !===========================================================================  
  ! Add a chunk of data to the grid. Makes conversions from
  ! multi-dimensional arrays to uni-dimensional arrays so that the arrays are
  ! received correctly in C++
  subroutine se_catalyst_add_chunk(nstep, time, phys_state, ncols)
    use ppgrid,       only: pver
    !-----------------------------------------------------------------------
    !
    ! Arguments
    !
    integer, intent(in)                :: nstep ! current timestep number
    real(kind=8),intent(in)            :: time  ! current time
    type(physics_state), intent(in)    :: phys_state
    integer, intent(in)                :: ncols
    !
    ! Locals
    !
    real(r8)                           :: psTransVar(1), tTransVar(1), &
         uTransVar(1), vTransVar(1)



    write(*, "(A, I4, A, I4,  A, I4, A, I4, A, I4)") &
         "se_catalyst_add_chunk: lchnk=", phys_state%lchnk, &
         " ncols=", ncols, &
         " size(lon)=", size(phys_state%lon), &
         " size(lat)=", size(phys_state%lat), &
         " size(ps)=",  size(phys_state%ps),  &
         " size(t,1)=",   size(phys_state%t, 1), &
         " size(t,2)=",   size(phys_state%t, 2)
    call se_add_chunk(nstep, ncols, &
         phys_state%lon, phys_state%lat, &
         transfer(phys_state%ps, psTransVar), &
         transfer(phys_state%t, tTransVar), &
         transfer(phys_state%u, uTransVar), &
         transfer(phys_state%v, vTransVar))
  end subroutine se_catalyst_add_chunk

  !===========================================================================  
  ! Coprocesses data
  subroutine se_catalyst_coprocess(nstep, time)
    use ppgrid,       only: pver
    !-----------------------------------------------------------------------
    !
    ! Arguments
    !
    integer, intent(in)                :: nstep ! current timestep number
    real(kind=8),intent(in)            :: time  ! current time
    !
    ! Locals
    !
    write(*,'(a, i5.2, f5.2)') "catalyst_coprocess: ", nstep, time
    call se_coprocess()
  end subroutine se_catalyst_coprocess

  !==============================================================================
  ! Releases allocated memory
  subroutine catalyst_finalize()

    !-----------------------------------------------------------------------
    !
    ! Arguments
    !

    !
    ! Locals
    !
    write(*,'(a)') "catalyst_finalize"
    call se_finalize()
    call se_coprocessorfinalize()
  end subroutine catalyst_finalize

!==============================================================================

end module se_catalyst_adapter
